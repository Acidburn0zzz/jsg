/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7,8,10],$V1=[1,8],$V2=[8,9],$V3=[1,20],$V4=[1,21],$V5=[1,28],$V6=[1,30],$V7=[1,38],$V8=[1,42],$V9=[1,39],$Va=[1,43],$Vb=[2,25],$Vc=[9,20,29],$Vd=[8,9,20,29,44],$Ve=[2,41],$Vf=[1,47],$Vg=[1,49],$Vh=[1,50],$Vi=[1,8,61],$Vj=[1,8,9,19,20,29,31,34,36,44,46,52,54,62,63],$Vk=[29,34],$Vl=[8,19,29,31,34,44,52,54],$Vm=[8,9,19,20,29,31,34,36,44,46,52,54,62,63],$Vn=[1,64],$Vo=[1,65],$Vp=[1,68],$Vq=[8,9,20,29,44,46],$Vr=[1,72],$Vs=[1,75],$Vt=[29,46],$Vu=[1,77],$Vv=[8,29,44,46],$Vw=[1,88];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"doc":3,"Qdirective_E_Star":4,"grammarDef":5,"directive":6,"DOT_TYPE":7,"ID":8,"GT_SEMI":9,"DOT_IGNORE":10,"QID_E_Star":11,"Q_O_QobjectDef_E_Or_QarrayDef_E_Or_QnonObject_E_Or_Qterminal_E_C_E_Star":12,"O_QobjectDef_E_Or_QarrayDef_E_Or_QnonObject_E_Or_Qterminal_E_C":13,"objectDef":14,"arrayDef":15,"nonObject":16,"terminal":17,"objectExpr":18,"GT_LCURLEY":19,"GT_RCURLEY":20,"resolve_Qparticle_E_Plus":21,"Q_O_QGT_PIPE_E_S_Qparticle_E_Star_C_E_Star":22,"GT_MINUS_GT":23,"propertyType":24,"Qparticle_E_Plus":25,"particle":26,"Qparticle_E_Star":27,"O_QGT_PIPE_E_S_Qparticle_E_Star_C":28,"GT_PIPE":29,"arrayExpr":30,"GT_LBRACKET":31,"Q_O_QpropertyType_E_S_QGT_COMMA_E_Opt_C_E_Plus":32,"Q_O_QGT_PIPE_E_S_QpropertyType_E_S_QGT_COMMA_E_Opt_Star_C_E_Star":33,"GT_RBRACKET":34,"QGT_COMMA_E_Opt":35,"GT_COMMA":36,"O_QpropertyType_E_S_QGT_COMMA_E_Opt_C":37,"Q_O_QpropertyType_E_S_QGT_COMMA_E_Opt_C_E_Star":38,"O_QGT_PIPE_E_S_QpropertyType_E_S_QGT_COMMA_E_Opt_Star_C":39,"Qcardinality_E_Opt":40,"propertyOrGroup":41,"cardinality":42,"GT_COLON":43,"GT_LPAREN":44,"Q_O_QGT_PIPE_E_S_QID_E_C_E_Plus":45,"GT_RPAREN":46,"resolve_QpropertyOrGroup_E_Plus":47,"Q_O_QGT_PIPE_E_S_QpropertyOrGroup_E_Plus_C_E_Plus":48,"O_QGT_PIPE_E_S_QID_E_C":49,"QpropertyOrGroup_E_Plus":50,"O_QGT_PIPE_E_S_QpropertyOrGroup_E_Plus_C":51,"STRING":52,"typeAlternatives":53,"GT_DOT":54,"O_QID_E_Or_QSTRING_E_C":55,"Q_O_QGT_PIPE_E_S_QID_E_Or_QSTRING_E_C_E_Plus":56,"O_QGT_PIPE_E_S_QID_E_Or_QSTRING_E_C":57,"GT_EQUAL":58,"Q_O_QGT_PLUS_E_S_QSTRING_E_C_E_Star":59,"O_QGT_PLUS_E_S_QSTRING_E_C":60,"GT_PLUS":61,"GT_OPT":62,"GT_TIMES":63,"$accept":0,"$end":1},
terminals_: {2:"error",7:"DOT_TYPE",8:"ID",9:"GT_SEMI",10:"DOT_IGNORE",19:"GT_LCURLEY",20:"GT_RCURLEY",23:"GT_MINUS_GT",29:"GT_PIPE",31:"GT_LBRACKET",34:"GT_RBRACKET",36:"GT_COMMA",43:"GT_COLON",44:"GT_LPAREN",46:"GT_RPAREN",52:"STRING",54:"GT_DOT",58:"GT_EQUAL",61:"GT_PLUS",62:"GT_OPT",63:"GT_TIMES"},
productions_: [0,[3,2],[4,0],[4,2],[6,3],[6,3],[11,0],[11,2],[5,1],[13,1],[13,1],[13,1],[13,1],[12,0],[12,2],[14,2],[18,2],[18,4],[18,5],[21,1],[25,1],[25,2],[27,0],[27,2],[28,2],[22,0],[22,2],[15,2],[30,4],[35,0],[35,1],[37,2],[32,1],[32,2],[38,0],[38,2],[39,2],[33,0],[33,2],[26,2],[26,1],[40,0],[40,1],[41,4],[41,7],[41,4],[49,2],[45,1],[45,2],[47,1],[50,1],[50,2],[51,2],[48,1],[48,2],[24,1],[24,1],[24,1],[24,1],[24,3],[24,1],[53,2],[55,1],[55,1],[57,2],[56,1],[56,2],[16,5],[17,4],[60,2],[59,0],[59,2],[42,1],[42,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return makeGrammar($$[$0-1], $$[$0]);
    
break;
case 2:
this.$ = { };
break;
case 3:
this.$ = extend($$[$0-1], $$[$0]);
break;
case 4:
this.$ = { discriminator: $$[$0-1] };
break;
case 5:
this.$ = { ignore: $$[$0-1] };
break;
case 6:
this.$ = [ ];
break;
case 7: case 14: case 21: case 23: case 26: case 48: case 54: case 66: case 71:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 13: case 22: case 25: case 70:
this.$ = [];
break;
case 15:
this.$ = extend({ id: $$[$0-1]}, $$[$0]);
break;
case 16:
this.$ = { type: "object", expr: { type: "epsilon" } };
break;
case 17:
this.$ = { type: "object", expr: $$[$0-1].length ? { type: "or", exprs: [$$[$0-2]].concat($$[$0-1]) } : $$[$0-2] };
break;
case 18:
this.$ = { type: "map", from: $$[$0-3], to: $$[$0-1] };
break;
case 19: case 49:
this.$ = $$[$0].length > 1 ? { type: "propertyList", exprs: $$[$0] } : $$[$0][0];
break;
case 20:
this.$ = [ $$[$0] ];
break;
case 24:
this.$ = $$[$0].length === 0 ? { type: "epsilon" } : $$[$0].length === 1 ? $$[$0] : { type: "propertyList", exprs: $$[$0] };
break;
case 28:
this.$ = { type: "array", of: $$[$0-2] };
break;
case 39:
this.$ = { type: "reference", id: $$[$0-1], card: $$[$0] };
break;
case 41:
this.$ = "";
break;
case 43:
this.$ = { type: "property", id: $$[$0-3], propertyType: $$[$0-1], card: $$[$0] };
break;
case 44:
this.$ = { type: "propertyEnumeration", ids: [$$[$0-5]].concat($$[$0-4]), propertyType: $$[$0-1], card: $$[$0] };
break;
case 45:
this.$ = { type: "or", exprs: [$$[$0-2]].concat($$[$0-1]) };
break;
case 46: case 52: case 64: case 69:
this.$ = $$[$0];
break;
case 47: case 50: case 65:
this.$ = [$$[$0]];
break;
case 51:
this.$ = $$[$0-1].concat($$[$0-1]);
break;
case 53:
this.$ = [$$[$0]];;
break;
case 59:
this.$ = $$[$0-1];
break;
case 61:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 67:
this.$ = { type: "nonObject", id: $$[$0-4], expr: $$[$0-1].length ? { type: "or", exprs: [$$[$0-2]].concat($$[$0-1]) } : $$[$0-2] };
break;
case 68:
this.$ = { type: "terminal", id: $$[$0-3], regexp: $$[$0-1].slice(1, -1).concat($$[$0].map(function (s) { return s.slice(1, -1); }).join('')) };
break;
}
},
table: [o($V0,[2,2],{3:1,4:2}),{1:[3]},o($V1,[2,13],{5:3,6:4,12:5,7:[1,6],10:[1,7]}),{1:[2,1]},o($V0,[2,3]),{1:[2,8],8:[1,13],13:8,14:9,15:10,16:11,17:12},{8:[1,14]},o($V2,[2,6],{11:15}),o($V1,[2,14]),o($V1,[2,9]),o($V1,[2,10]),o($V1,[2,11]),o($V1,[2,12]),{18:16,19:$V3,30:17,31:$V4,43:[1,19],58:[1,18]},{9:[1,22]},{8:[1,24],9:[1,23]},o($V1,[2,15]),o($V1,[2,27]),{8:$V5,21:25,25:26,26:27,41:29,44:$V6},{52:[1,31]},{8:[1,34],20:[1,32],21:33,25:26,26:27,41:29,44:$V6},{8:$V7,18:40,19:$V3,24:37,30:41,31:$V4,32:35,37:36,44:$V8,52:$V9,54:$Va},o($V0,[2,4]),o($V0,[2,5]),o($V2,[2,7]),o([9,29],$Vb,{22:44}),o($Vc,[2,19],{41:29,26:45,8:$V5,44:$V6}),o($Vd,[2,20]),o($Vd,$Ve,{40:46,42:48,43:$Vf,62:$Vg,63:$Vh}),o($Vd,[2,40]),{8:[1,51],41:54,44:$V6,47:52,50:53},o($Vi,[2,70],{59:55}),o($Vj,[2,16]),o([20,29],$Vb,{22:56}),o([8,20,29,44],$Ve,{40:46,42:48,23:[1,57],43:$Vf,62:$Vg,63:$Vh}),o($Vk,[2,37],{24:37,18:40,30:41,33:58,37:59,8:$V7,19:$V3,31:$V4,44:$V8,52:$V9,54:$Va}),o($Vl,[2,32]),o($Vl,[2,29],{35:60,36:[1,61]}),o($Vm,[2,55]),o($Vm,[2,56]),o($Vm,[2,57]),o($Vm,[2,58]),{8:$Vn,52:$Vo,53:62,55:63},o($Vm,[2,60]),{9:[1,66],28:67,29:$Vp},o($Vd,[2,21]),o($Vd,[2,39]),{8:$V7,18:40,19:$V3,24:69,30:41,31:$V4,44:$V8,52:$V9,54:$Va},o($Vq,[2,42]),o($Vq,[2,72]),o($Vq,[2,73]),{29:$Vr,43:$Vf,45:70,49:71},{29:$Vs,48:73,51:74},o($Vt,[2,49],{41:76,8:$Vu,44:$V6}),o($Vv,[2,50]),o($V1,[2,68],{60:78,61:[1,79]}),{20:[1,80],28:67,29:$Vp},{8:$V7,18:40,19:$V3,24:81,30:41,31:$V4,44:$V8,52:$V9,54:$Va},{29:[1,84],34:[1,82],39:83},o($Vl,[2,33]),o($Vl,[2,31]),o($Vl,[2,30]),{46:[1,85]},{29:$Vw,56:86,57:87},o($Vt,[2,62]),o($Vt,[2,63]),o($V1,[2,67]),o($Vc,[2,26]),o($Vd,[2,22],{27:89}),o($Vq,$Ve,{42:48,40:90,62:$Vg,63:$Vh}),{29:$Vr,46:[1,91],49:92},o($Vt,[2,47]),{8:[1,93]},{29:$Vs,46:[1,94],51:95},o($Vt,[2,53]),{8:$Vu,41:54,44:$V6,47:96,50:53},o($Vv,[2,51]),{43:$Vf},o($Vi,[2,71]),{52:[1,97]},o($Vj,[2,17]),{20:[1,98]},o($Vj,[2,28]),o($Vk,[2,38]),o($Vl,[2,34],{38:99}),o($Vm,[2,59]),{29:$Vw,46:[2,61],57:100},o($Vt,[2,65]),{8:$Vn,52:$Vo,55:101},o($Vc,[2,24],{41:29,26:102,8:$V5,44:$V6}),o($Vq,[2,43]),{43:[1,103]},o($Vt,[2,48]),o($Vt,[2,46]),o($Vq,[2,45]),o($Vt,[2,54]),o($Vt,[2,52]),o($Vi,[2,69]),o($Vj,[2,18]),o($Vk,[2,36],{24:37,18:40,30:41,37:104,8:$V7,19:$V3,31:$V4,44:$V8,52:$V9,54:$Va}),o($Vt,[2,66]),o($Vt,[2,64]),o($Vd,[2,23]),{8:$V7,18:40,19:$V3,24:105,30:41,31:$V4,44:$V8,52:$V9,54:$Va},o($Vl,[2,35]),o($Vq,$Ve,{42:48,40:106,62:$Vg,63:$Vh}),o($Vq,[2,44])],
defaultActions: {3:[2,1]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  function makeGrammar (directives, decls) {
    var m = { };
    var o = [ ];
    decls.forEach(function (elt) {
      m[elt.id] = elt;
      o.push(elt.id)
    });
    return extend(directives, { start: o[0], order: o, type: "schema", map: m });
  }

  function logret (x) {
    console.warn(x);
    return x;
  }

  // Extends a base object with properties of other objects
  function extend(base) {
    if (!base) base = {};
    for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)
      for (var name in arg)
        base[name] = arg[name];
    return base;
  }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/**/
break;
case 1:return 43;
break;
case 2:return 'GT_DOLLAR';
break;
case 3:return 58;
break;
case 4:return 31;
break;
case 5:return 34;
break;
case 6:return 19;
break;
case 7:return 20;
break;
case 8:return 44;
break;
case 9:return 46;
break;
case 10:return 23;
break;
case 11:return 62;
break;
case 12:return 29;
break;
case 13:return 61;
break;
case 14:return 9;
break;
case 15:return 63;
break;
case 16:return 7;
break;
case 17:return 10;
break;
case 18:return 54;
break;
case 19:return 8;
break;
case 20:return 52;
break;
case 21:return 'invalid character '+yy_.yytext;
break;
}
},
rules: [/^(?:\s+|((\/\/|#)[^\u000a\u000d]*))/,/^(?::)/,/^(?:\$)/,/^(?:=)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:->)/,/^(?:\?)/,/^(?:\|)/,/^(?:\+)/,/^(?:;)/,/^(?:\*)/,/^(?:(\.[Tt][Yy][Pp][Ee]))/,/^(?:(\.[Ii][Gg][Nn][Oo][Rr][Ee]))/,/^(?:\.)/,/^(?:([a-zA-Z_]+))/,/^(?:("([^\"]|\\")*"))/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}