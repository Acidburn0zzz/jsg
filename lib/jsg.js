/* parser generated by jison 0.4.17 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var jsg = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,7,8,11],$V1=[1,8],$V2=[8,10],$V3=[1,20],$V4=[1,21],$V5=[1,31],$V6=[1,33],$V7=[1,34],$V8=[1,39],$V9=[1,40],$Va=[1,43],$Vb=[1,44],$Vc=[10,33],$Vd=[2,88],$Ve=[1,57],$Vf=[1,58],$Vg=[1,56],$Vh=[1,55],$Vi=[1,54],$Vj=[2,30],$Vk=[10,24,33],$Vl=[8,10,24,33,45,46],$Vm=[2,39],$Vn=[1,70],$Vo=[1,65],$Vp=[1,67],$Vq=[1,68],$Vr=[1,69],$Vs=[1,8,10,23,24,33,38,45,46,48,62,63,64],$Vt=[23,33,38,62,63,64],$Vu=[8,10,23,24,33,38,45,46,48,62,63,64],$Vv=[1,81],$Vw=[1,82],$Vx=[10,33,48],$Vy=[8,10,33,45,46,48,55,80],$Vz=[8,10,23,33,45,46,48,55,62,63,64,80],$VA=[33,48],$VB=[1,92],$VC=[8,10,24,33,38,45,46,48,55,80],$VD=[1,98],$VE=[1,101],$VF=[1,103],$VG=[8,33,45,46,48],$VH=[1,112],$VI=[8,10,24,33,45,46,48];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"doc":3,"Qdirective_E_Star":4,"grammarDef":5,"directive":6,"DOT_TYPE":7,"ID":8,"Q_O_QGT_MINUS_E_S_QID_E_Plus_C_E_Opt":9,"GT_SEMI":10,"DOT_IGNORE":11,"QID_E_Star":12,"QID_E_Plus":13,"O_QGT_MINUS_E_S_QID_E_Plus_C":14,"GT_MINUS":15,"Q_O_QobjectDef_E_Or_QarrayDef_E_Or_QnonObject_E_Or_QlexerRuleSpec_E_C_E_Star":16,"O_QobjectDef_E_Or_QarrayDef_E_Or_QnonObject_E_Or_QlexerRuleSpec_E_C":17,"objectDef":18,"arrayDef":19,"nonObject":20,"lexerRuleSpec":21,"objectExpr":22,"GT_LCURLEY":23,"GT_RCURLEY":24,"resolve_Qparticle_E_Plus":25,"Q_O_QGT_PIPE_E_S_Qparticle_E_Star_C_E_Star":26,"GT_MINUS_GT":27,"propertyType":28,"Qparticle_E_Plus":29,"particle":30,"Qparticle_E_Star":31,"O_QGT_PIPE_E_S_Qparticle_E_Star_C":32,"GT_PIPE":33,"arrayExpr":34,"GT_LBRACKET":35,"Q_O_QGT_PIPE_E_S_QpropertyType_E_C_E_Star":36,"QebnfSuffix_E_Opt":37,"GT_RBRACKET":38,"O_QGT_PIPE_E_S_QpropertyType_E_C":39,"QGT_COMMA_E_Opt":40,"GT_COMMA":41,"ebnfSuffix":42,"propertyOrGroup":43,"GT_COLON":44,"STRING":45,"GT_LPAREN":46,"Q_O_QGT_PIPE_E_S_QID_E_C_E_Plus":47,"GT_RPAREN":48,"resolve_QpropertyOrGroup_E_Plus":49,"Q_O_QGT_PIPE_E_S_QpropertyOrGroup_E_Plus_C_E_Plus":50,"O_QGT_PIPE_E_S_QID_E_C":51,"QpropertyOrGroup_E_Plus":52,"O_QGT_PIPE_E_S_QpropertyOrGroup_E_Plus_C":53,"typeAlternatives":54,"GT_DOT":55,"O_QID_E_Or_QSTRING_E_C":56,"Q_O_QGT_PIPE_E_S_QID_E_Or_QSTRING_E_C_E_Plus":57,"O_QGT_PIPE_E_S_QID_E_Or_QSTRING_E_C":58,"GT_EQUAL":59,"lexerStart":60,"lexerRuleBlock":61,"GT_OPT":62,"GT_TIMES":63,"GT_PLUS":64,"INT":65,"Q_O_QGT_COMMA_E_S_QINT_E_Or_QGT_TIMES_E_Opt_C_E_Opt":66,"O_QINT_E_Or_QGT_TIMES_E_C":67,"Q_O_QINT_E_Or_QGT_TIMES_E_C_E_Opt":68,"O_QGT_COMMA_E_S_QINT_E_Or_QGT_TIMES_E_Opt_C":69,"lexerAltList":70,"lexerAlt":71,"Q_O_QGT_PIPE_E_S_QlexerAlt_E_C_E_Star":72,"O_QGT_PIPE_E_S_QlexerAlt_E_C":73,"lexerElements":74,"QlexerElement_E_Plus":75,"lexerElement":76,"lexerAtom":77,"lexerBlock":78,"terminal":79,"LEXER_CHAR_SET":80,"$accept":0,"$end":1},
terminals_: {2:"error",7:"DOT_TYPE",8:"ID",10:"GT_SEMI",11:"DOT_IGNORE",15:"GT_MINUS",23:"GT_LCURLEY",24:"GT_RCURLEY",27:"GT_MINUS_GT",33:"GT_PIPE",35:"GT_LBRACKET",38:"GT_RBRACKET",41:"GT_COMMA",44:"GT_COLON",45:"STRING",46:"GT_LPAREN",48:"GT_RPAREN",55:"GT_DOT",59:"GT_EQUAL",62:"GT_OPT",63:"GT_TIMES",64:"GT_PLUS",65:"INT",80:"LEXER_CHAR_SET"},
productions_: [0,[3,2],[4,0],[4,2],[6,4],[6,3],[13,1],[13,2],[14,2],[9,0],[9,1],[12,0],[12,2],[5,1],[17,1],[17,1],[17,1],[17,1],[16,0],[16,2],[18,2],[22,2],[22,4],[22,5],[25,1],[29,1],[29,2],[31,0],[31,2],[32,2],[26,0],[26,2],[19,2],[34,5],[39,2],[36,0],[36,2],[40,0],[40,1],[37,0],[37,1],[30,2],[30,1],[43,4],[43,4],[43,7],[43,4],[51,2],[47,1],[47,2],[49,1],[52,1],[52,2],[53,2],[50,1],[50,2],[28,1],[28,1],[28,1],[28,1],[28,3],[28,1],[54,2],[56,1],[56,1],[58,2],[57,1],[57,2],[20,5],[21,4],[60,1],[42,1],[42,1],[42,1],[42,4],[67,1],[67,1],[68,0],[68,1],[69,2],[66,0],[66,1],[61,1],[70,2],[73,2],[72,0],[72,2],[71,1],[71,0],[74,1],[75,1],[75,2],[76,2],[76,2],[78,3],[77,1],[77,1],[77,1],[79,1],[79,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

        return makeGrammar($$[$0-1], $$[$0]);
    
break;
case 2:
this.$ = { };
break;
case 3:
this.$ = extend($$[$0-1], $$[$0]);
break;
case 4:
this.$ = { discriminator: { property: $$[$0-2], undiscriminated: $$[$0-1] } };
break;
case 5:
this.$ = { ignore: $$[$0-1] };
break;
case 6: case 25:
this.$ = [ $$[$0] ];
break;
case 7: case 12: case 19: case 26: case 28: case 31: case 36: case 49: case 55: case 67: case 86: case 91:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 8: case 34: case 47: case 53: case 65: case 79: case 84:
this.$ = $$[$0];
break;
case 9: case 11:
this.$ = [ ];
break;
case 18: case 27: case 30: case 35: case 85:
this.$ = [];
break;
case 20:
this.$ = extend({ id: $$[$0-1]}, $$[$0]);
break;
case 21:
this.$ = { type: "object", expr: { type: "epsilon" } };
break;
case 22:
this.$ = { type: "object", expr: $$[$0-1].length ? { type: "or", exprs: [$$[$0-2]].concat($$[$0-1]) } : $$[$0-2] };
break;
case 23:
this.$ = { type: "map", from: $$[$0-3], to: $$[$0-1] };
break;
case 24: case 50:
this.$ = $$[$0].length > 1 ? { type: "propertyList", exprs: $$[$0] } : $$[$0][0];
break;
case 29:
this.$ = $$[$0].length === 0 ? { type: "epsilon" } : $$[$0].length === 1 ? $$[$0] : { type: "propertyList", exprs: $$[$0] };
break;
case 33:

      this.$ = { type: "array", of: $$[$0-2].length ? { type: "or", exprs: [$$[$0-3]].concat($$[$0-2]) } : $$[$0-3] };
      if ($$[$0-1])
        this.$.card = $$[$0-1];
    
break;
case 39:
this.$ = "";
break;
case 41:
this.$ = { type: "reference", id: $$[$0-1], card: $$[$0] };
break;
case 43:
this.$ = { type: "property", id: $$[$0-3], propertyType: $$[$0-1], card: $$[$0] };
break;
case 44:
this.$ = { type: "property", id: $$[$0-3].substr(1, $$[$0-3].length-2), propertyType: $$[$0-1], card: $$[$0] };
break;
case 45:
this.$ = { type: "propertyEnumeration", ids: [$$[$0-5]].concat($$[$0-4]), propertyType: $$[$0-1], card: $$[$0] };
break;
case 46:
this.$ = { type: "or", exprs: [$$[$0-2]].concat($$[$0-1]) };
break;
case 48: case 51: case 66: case 90:
this.$ = [$$[$0]];
break;
case 52:
this.$ = $$[$0-1].concat($$[$0-1]);
break;
case 54:
this.$ = [$$[$0]];;
break;
case 56:
this.$ = { type: "reference", id: $$[$0], card: "" };
break;
case 60:
this.$ = { type: "typeChoices", choices: $$[$0-1] };
break;
case 62:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 68:
this.$ = { type: "nonObject", id: $$[$0-4], expr: $$[$0-1].length ? { type: "or", exprs: [$$[$0-2]].concat($$[$0-1]) } : $$[$0-2] };
break;
case 69:

      yy.lexer.popState();
      this.$ = { type: "terminal", id: $$[$0-3], rule: $$[$0-1] };
    
break;
case 70:
 yy.lexer.begin('lexer'); 
break;
case 74:
this.$ = { min: $$[$0-2], max: $$[$0-1] };
break;
case 76: case 77: case 80:
this.$ = "*";
break;
case 83:
this.$ = $$[$0].length ? { type: "alt", elts: [$$[$0-1]].concat($$[$0]) } : $$[$0-1];
break;
case 88:
this.$ = null;
break;
case 89:
this.$ = $$[$0].length > 1 ? { type: "seq", elts: $$[$0] } : $$[$0][0];
break;
case 92: case 93:
this.$ = $$[$0] === "" ? $$[$0-1] : { type: "rept", term: $$[$0-1], count: $$[$0] };
break;
case 94:
this.$ = $$[$0-1];
break;
case 96:
this.$ = testCharSet($$[$0].substr(1, $$[$0].length - 2));
break;
case 97:
this.$ = { type: "wildcard" };
break;
case 98:
this.$ = { type: "reference", ref: $$[$0] };
break;
case 99:
this.$ = { type: "literal", val: $$[$0].substr(1, $$[$0].length - 2) };
break;
}
},
table: [o($V0,[2,2],{3:1,4:2}),{1:[3]},o($V1,[2,18],{5:3,6:4,16:5,7:[1,6],11:[1,7]}),{1:[2,1]},o($V0,[2,3]),{1:[2,13],8:[1,13],17:8,18:9,19:10,20:11,21:12,60:14},{8:[1,15]},o($V2,[2,11],{12:16}),o($V1,[2,19]),o($V1,[2,14]),o($V1,[2,15]),o($V1,[2,16]),o($V1,[2,17]),{22:17,23:$V3,34:18,35:$V4,44:[2,70],59:[1,19]},{44:[1,22]},{9:23,10:[2,9],14:24,15:[1,25]},{8:[1,27],10:[1,26]},o($V1,[2,20]),o($V1,[2,32]),{8:$V5,25:28,29:29,30:30,43:32,45:$V6,46:$V7},{8:[1,37],24:[1,35],25:36,29:29,30:30,43:32,45:$V6,46:$V7},{8:$V8,22:41,23:$V3,28:38,34:42,35:$V4,45:$V9,46:$Va,55:$Vb},o($Vc,$Vd,{61:45,70:46,71:47,74:48,75:49,76:50,77:51,78:52,79:53,8:$Ve,45:$Vf,46:$Vg,55:$Vh,80:$Vi}),{10:[1,59]},{10:[2,10]},{8:[1,61],13:60},o($V0,[2,5]),o($V2,[2,12]),o($Vc,$Vj,{26:62}),o($Vk,[2,24],{43:32,30:63,8:$V5,45:$V6,46:$V7}),o($Vl,[2,25]),o($Vl,$Vm,{37:64,42:66,23:$Vn,44:$Vo,62:$Vp,63:$Vq,64:$Vr}),o($Vl,[2,42]),{44:[1,71]},{8:[1,72],43:75,45:$V6,46:$V7,49:73,52:74},o($Vs,[2,21]),o([24,33],$Vj,{26:76}),o([8,24,33,45,46],$Vm,{37:64,42:66,23:$Vn,27:[1,77],44:$Vo,62:$Vp,63:$Vq,64:$Vr}),o($Vt,[2,35],{36:78}),o($Vu,[2,56]),o($Vu,[2,57]),o($Vu,[2,58]),o($Vu,[2,59]),{8:$Vv,45:$Vw,54:79,56:80},o($Vu,[2,61]),{10:[1,83]},{10:[2,82]},o($Vx,[2,85],{72:84}),o($Vx,[2,87]),o($Vx,[2,89],{77:51,78:52,79:53,76:85,8:$Ve,45:$Vf,46:$Vg,55:$Vh,80:$Vi}),o($Vy,[2,90]),o($Vy,$Vm,{42:66,37:86,23:$Vn,62:$Vp,63:$Vq,64:$Vr}),o($Vy,$Vm,{42:66,37:87,23:$Vn,62:$Vp,63:$Vq,64:$Vr}),o($Vz,[2,95]),o($Vz,[2,96]),o($Vz,[2,97]),o($VA,$Vd,{71:47,74:48,75:49,76:50,77:51,78:52,79:53,70:88,8:$Ve,45:$Vf,46:$Vg,55:$Vh,80:$Vi}),o($Vz,[2,98]),o($Vz,[2,99]),o($V0,[2,4]),{8:[1,89],10:[2,8]},o($V2,[2,6]),{10:[1,90],32:91,33:$VB},o($Vl,[2,26]),o($Vl,[2,41]),{8:$V8,22:41,23:$V3,28:93,34:42,35:$V4,45:$V9,46:$Va,55:$Vb},o($VC,[2,40]),o($VC,[2,71]),o($VC,[2,72]),o($VC,[2,73]),{65:[1,94]},{8:$V8,22:41,23:$V3,28:95,34:42,35:$V4,45:$V9,46:$Va,55:$Vb},{33:$VD,44:$Vo,47:96,51:97},{33:$VE,50:99,53:100},o($VA,[2,50],{43:102,8:$VF,45:$V6,46:$V7}),o($VG,[2,51]),{24:[1,104],32:91,33:$VB},{8:$V8,22:41,23:$V3,28:105,34:42,35:$V4,45:$V9,46:$Va,55:$Vb},{23:$Vn,33:[1,108],37:106,38:$Vm,39:107,42:66,62:$Vp,63:$Vq,64:$Vr},{48:[1,109]},{33:$VH,57:110,58:111},o($VA,[2,63]),o($VA,[2,64]),o($V1,[2,69]),o([10,48],[2,83],{73:113,33:[1,114]}),o($Vy,[2,91]),o($Vy,[2,92]),o($Vy,[2,93]),{48:[1,115]},o($V2,[2,7]),o($V1,[2,68]),o($Vk,[2,31]),o($Vl,[2,27],{31:116}),o($VI,$Vm,{42:66,37:117,23:$Vn,62:$Vp,63:$Vq,64:$Vr}),{24:[2,80],41:[1,120],66:118,69:119},o($VI,$Vm,{42:66,37:121,23:$Vn,62:$Vp,63:$Vq,64:$Vr}),{33:$VD,48:[1,122],51:123},o($VA,[2,48]),{8:[1,124]},{33:$VE,48:[1,125],53:126},o($VA,[2,54]),{8:$VF,43:75,45:$V6,46:$V7,49:127,52:74},o($VG,[2,52]),{44:$Vo},o($Vs,[2,22]),{24:[1,128]},{38:[1,129]},o($Vt,[2,36]),{8:$V8,22:41,23:$V3,28:130,34:42,35:$V4,45:$V9,46:$Va,55:$Vb},o($Vu,[2,60]),{33:$VH,48:[2,62],58:131},o($VA,[2,66]),{8:$Vv,45:$Vw,56:132},o($Vx,[2,86]),o($Vx,$Vd,{74:48,75:49,76:50,77:51,78:52,79:53,71:133,8:$Ve,45:$Vf,46:$Vg,55:$Vh,80:$Vi}),o($Vz,[2,94]),o($Vk,[2,29],{43:32,30:134,8:$V5,45:$V6,46:$V7}),o($VI,[2,43]),{24:[1,135]},{24:[2,81]},{24:[2,77],63:[1,139],65:[1,138],67:137,68:136},o($VI,[2,44]),{44:[1,140]},o($VA,[2,49]),o($VA,[2,47]),o($VI,[2,46]),o($VA,[2,55]),o($VA,[2,53]),o($Vs,[2,23]),o($Vs,[2,33]),o($Vt,[2,34]),o($VA,[2,67]),o($VA,[2,65]),o($Vx,[2,84]),o($Vl,[2,28]),o($VC,[2,74]),{24:[2,79]},{24:[2,78]},{24:[2,75]},{24:[2,76]},{8:$V8,22:41,23:$V3,28:141,34:42,35:$V4,45:$V9,46:$Va,55:$Vb},o($VI,$Vm,{42:66,37:142,23:$Vn,62:$Vp,63:$Vq,64:$Vr}),o($VI,[2,45])],
defaultActions: {3:[2,1],24:[2,10],46:[2,82],119:[2,81],136:[2,79],137:[2,78],138:[2,75],139:[2,76]},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        function _parseError (msg, hash) {
            this.message = msg;
            this.hash = hash;
        }
        _parseError.prototype = Error;

        throw new _parseError(str, hash);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        var lex = function () {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        };
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  function makeGrammar (directives, decls) {
    var m = { };
    var o = [ ];
    var terminals = [];
    decls.forEach(function (elt) {
      m[elt.id] = elt;
      o.push(elt.id);
      if (elt.type === "terminal")
        terminals.push(elt);
    });
    terminals.forEach(terminal => { compileRegexp(terminal, m); });
    return extend(directives, { start: o[0], order: o, type: "schema", map: m });
  }

  function logret (x) {
    console.warn(x);
    return x;
  }

  // Extends a base object with properties of other objects
  function extend(base) {
    if (!base) base = {};
    for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)
      for (var name in arg)
        base[name] = arg[name];
    return base;
  }

  function compileRegexp (terminal, m) {
    //console.warn(JSON.stringify(terminal));
    function dive (elt) {
      switch (elt.type) {
      case "rept":
        return "(" + dive(elt.term) + ")" + elt.count;
      case "wildcard":
        return ".";
      case "alt":
        return "(" + elt.elts.map(e => {
          return dive(e);
        }).join("|") + ")";
      case "seq":
        return "(" + elt.elts.map(e => {
          return dive(e);
        }).join("") + ")";
      case "CCseq":
        return elt.elts.map(e => {
          return dive(e);
        }).join("");
      case "CCrange":
        return dive(elt.from) + "-" + dive(elt.to);
      case "charset":
        return "[" + dive(elt.expr) + "]";
      case "ch":
      case "literal":
        return elt.val.replace(/([?+*\\])/g, "\\$1");
      case "CCnot":
        return "^" + dive(elt.expr);
      case "esc":
        return "\\" + elt.val;
      case "hex":
        return "\\u" + elt.val;
      case "reference":
        var lookFor = elt.ref; if (!lookFor) throw Error("no ref in " + JSON.stringify(elt));
        var refd = m[lookFor]; if (!refd) throw Error(lookFor + " not found");
        compileRegexp(refd, m);
        return refd.pattern;
      default:
        throw Error("unknown elt type: " + JSON.stringify(elt));
//        console.warn(elt);
      }
    }
    if (!("regexp" in terminal))
      terminal.pattern = dive(terminal.rule);
      terminal.regexp = new RegExp("^(" + dive(terminal.rule) + ")$");
  }

  function testCharSet (str) {
    var not = false;
    if (str[0] === "^") {
      not = true;
      str = str.substr(1);
    }
    var ranges = str.match(/(?:\\(?:u[0-9a-fA-F]+|[\\bnrt])|[^\\])(?:-(?:\\(?:u[0-9a-fA-F]+|[\\bnrt])|[^\\]))?/g).map(s => {
      var r = s.match(/(?:\\(?:u([0-9a-fA-F]+)|([\\bnrt]))|([^\\]))(?:(-)(?:\\(?:u([0-9a-fA-F]+)|([\\bnrt]))|([^\\])))?/);
      function atom (hex, esc, ch) {
        return hex ? { type: "hex", val: hex } :
        esc ? { type: "esc", val: esc } :
        { type: "ch", val: ch };
      }
      var from = atom(r[1], r[2], r[3]);
      var ret = r[4] ? { type: "CCrange", from: from, to: atom(r[5], r[6], r[7]) } : from;
      return ret;
    });
    var seq = ranges.length > 1 ? { type: "CCseq", elts: ranges } : ranges[0];
    var ret = not ? { type: "CCnot", expr: seq } : seq;
    return { type: "charset", expr: ret };
  }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/**/
break;
case 1:return 44;
break;
case 2:return 10;
break;
case 3:return 'GT_DOLLAR';
break;
case 4:return 59;
break;
case 5:return 80;
break;
case 6:return 35;
break;
case 7:return 38;
break;
case 8:return 23;
break;
case 9:return 24;
break;
case 10:return 46;
break;
case 11:return 48;
break;
case 12:return 27;
break;
case 13:return 15;
break;
case 14:return 62;
break;
case 15:return 33;
break;
case 16:return 64;
break;
case 17:return 10;
break;
case 18:return 63;
break;
case 19:return 7;
break;
case 20:return 11;
break;
case 21:return 55;
break;
case 22:return 41;
break;
case 23:return 8;
break;
case 24:return 45;
break;
case 25:return 65;
break;
case 26:return 'invalid character '+yy_.yytext;
break;
}
},
rules: [/^(?:\s+|((\/\/|#)[^\u000a\u000d]*))/,/^(?::)/,/^(?:;)/,/^(?:\$)/,/^(?:=)/,/^(?:(\[([^\u005c\u005d]|\\.)*\]))/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:->)/,/^(?:-)/,/^(?:\?)/,/^(?:\|)/,/^(?:\+)/,/^(?:;)/,/^(?:\*)/,/^(?:(\.[Tt][Yy][Pp][Ee]))/,/^(?:(\.[Ii][Gg][Nn][Oo][Rr][Ee]))/,/^(?:\.)/,/^(?:,)/,/^(?:([a-zA-Z_]+))/,/^(?:("([^\"]|\\")*"|'([^\']|\\')*'))/,/^(?:([0-9]+))/,/^(?:.)/],
conditions: {"lexer":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],"inclusive":true},"INITIAL":{"rules":[0,1,2,3,4,6,7,8,9,10,11,12,13,14,15,16,17,18,19,20,21,22,23,24,25,26],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = jsg;
exports.Parser = jsg.Parser;
exports.parse = function () { return jsg.parse.apply(jsg, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}