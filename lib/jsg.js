/* parser generated by jison 0.4.15 */
/*
  Returns a Parser object of the following structure:

  Parser: {
    yy: {}
  }

  Parser.prototype: {
    yy: {},
    trace: function(),
    symbols_: {associative list: name ==> number},
    terminals_: {associative list: number ==> name},
    productions_: [...],
    performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate, $$, _$),
    table: [...],
    defaultActions: {...},
    parseError: function(str, hash),
    parse: function(input),

    lexer: {
        EOF: 1,
        parseError: function(str, hash),
        setInput: function(input),
        input: function(),
        unput: function(str),
        more: function(),
        less: function(n),
        pastInput: function(),
        upcomingInput: function(),
        showPosition: function(),
        test_match: function(regex_match_array, rule_index),
        next: function(),
        lex: function(),
        begin: function(condition),
        popState: function(),
        _currentRules: function(),
        topState: function(),
        pushState: function(condition),

        options: {
            ranges: boolean           (optional: true ==> token location info will include a .range[] member)
            flex: boolean             (optional: true ==> flex-like lexing behaviour where the rules are tested exhaustively to find the longest match)
            backtrack_lexer: boolean  (optional: true ==> lexer regexes are tested in order and for each matching regex the action code is invoked; the lexer terminates the scan when a token is returned by the action code)
        },

        performAction: function(yy, yy_, $avoiding_name_collisions, YY_START),
        rules: [...],
        conditions: {associative list: name ==> set},
    }
  }


  token location info (@$, _$, etc.): {
    first_line: n,
    last_line: n,
    first_column: n,
    last_column: n,
    range: [start_number, end_number]       (where the numbers are indexes into the input string, regular zero-based)
  }


  the parseError function receives a 'hash' object with these members for lexer and parser errors: {
    text:        (matched text)
    token:       (the produced terminal token, if any)
    line:        (yylineno)
  }
  while parser (grammar) errors will also provide these members, i.e. parser errors deliver a superset of attributes: {
    loc:         (yylloc)
    expected:    (string describing the set of expected tokens)
    recoverable: (boolean: TRUE when the parser has a error recovery rule available for this particular error)
  }
*/
var parser = (function(){
var o=function(k,v,o,l){for(o=o||{},l=k.length;l--;o[k[l]]=v);return o},$V0=[1,10],$V1=[1,13],$V2=[1,14],$V3=[1,18],$V4=[1,20],$V5=[1,27],$V6=[1,31],$V7=[1,28],$V8=[2,17],$V9=[15,22,52],$Va=[10,15,22,37,52],$Vb=[2,33],$Vc=[1,35],$Vd=[1,37],$Ve=[1,38],$Vf=[1,10,55],$Vg=[22,27],$Vh=[10,12,22,24,27,37,45],$Vi=[10,12,15,22,24,27,29,37,39,45,52,56,57],$Vj=[1,55],$Vk=[10,15,22,37,39,52],$Vl=[1,59],$Vm=[1,62],$Vn=[22,39],$Vo=[1,64],$Vp=[10,22,37,39],$Vq=[1,75],$Vr=[1,10,12,15,22,24,27,29,37,39,45,52,56,57];
var parser = {trace: function trace() { },
yy: {},
symbols_: {"error":2,"grammarDef":3,"Q_O_QobjectDef_E_Or_QarrayDef_E_Or_QnonObject_E_Or_Qterminal_E_C_E_Star":4,"O_QobjectDef_E_Or_QarrayDef_E_Or_QnonObject_E_Or_Qterminal_E_C":5,"objectDef":6,"arrayDef":7,"nonObject":8,"terminal":9,"ID":10,"objectExpr":11,"GT_LCURLEY":12,"resolve_Qparticle_E_Plus":13,"Q_O_QGT_PIPE_E_S_Qparticle_E_Star_C_E_Star":14,"GT_RCURLEY":15,"GT_MINUS_GT":16,"propertyType":17,"Qparticle_E_Plus":18,"particle":19,"Qparticle_E_Star":20,"O_QGT_PIPE_E_S_Qparticle_E_Star_C":21,"GT_PIPE":22,"arrayExpr":23,"GT_LBRACKET":24,"Q_O_QpropertyType_E_S_QGT_COMMA_E_Opt_C_E_Plus":25,"Q_O_QGT_PIPE_E_S_QpropertyType_E_S_QGT_COMMA_E_Opt_Star_C_E_Star":26,"GT_RBRACKET":27,"QGT_COMMA_E_Opt":28,"GT_COMMA":29,"O_QpropertyType_E_S_QGT_COMMA_E_Opt_C":30,"Q_O_QpropertyType_E_S_QGT_COMMA_E_Opt_C_E_Star":31,"O_QGT_PIPE_E_S_QpropertyType_E_S_QGT_COMMA_E_Opt_Star_C":32,"Qcardinality_E_Opt":33,"propertyOrGroup":34,"cardinality":35,"GT_COLON":36,"GT_LPAREN":37,"Q_O_QGT_PIPE_E_S_QID_E_C_E_Plus":38,"GT_RPAREN":39,"resolve_QpropertyOrGroup_E_Plus":40,"Q_O_QGT_PIPE_E_S_QpropertyOrGroup_E_Plus_C_E_Plus":41,"O_QGT_PIPE_E_S_QID_E_C":42,"QpropertyOrGroup_E_Plus":43,"O_QGT_PIPE_E_S_QpropertyOrGroup_E_Plus_C":44,"STRING":45,"typeAlternatives":46,"O_QGT_MINUS_GT_E_S_QID_E_C":47,"Q_O_QGT_MINUS_GT_E_S_QID_E_C_E_Opt":48,"Q_O_QGT_PIPE_E_S_QSTRING_E_C_E_Plus":49,"O_QGT_PIPE_E_S_QSTRING_E_C":50,"GT_EQUAL":51,"GT_SEMI":52,"Q_O_QGT_PLUS_E_S_QSTRING_E_C_E_Star":53,"O_QGT_PLUS_E_S_QSTRING_E_C":54,"GT_PLUS":55,"GT_OPT":56,"GT_TIMES":57,"$accept":0,"$end":1},
terminals_: {2:"error",10:"ID",12:"GT_LCURLEY",15:"GT_RCURLEY",16:"GT_MINUS_GT",22:"GT_PIPE",24:"GT_LBRACKET",27:"GT_RBRACKET",29:"GT_COMMA",36:"GT_COLON",37:"GT_LPAREN",39:"GT_RPAREN",45:"STRING",51:"GT_EQUAL",52:"GT_SEMI",55:"GT_PLUS",56:"GT_OPT",57:"GT_TIMES"},
productions_: [0,[3,1],[5,1],[5,1],[5,1],[5,1],[4,0],[4,2],[6,2],[11,4],[11,5],[13,1],[18,1],[18,2],[20,0],[20,2],[21,2],[14,0],[14,2],[7,2],[23,4],[28,0],[28,1],[30,2],[25,1],[25,2],[31,0],[31,2],[32,2],[26,0],[26,2],[19,2],[19,1],[33,0],[33,1],[34,4],[34,7],[34,4],[42,2],[38,1],[38,2],[40,1],[43,1],[43,2],[44,2],[41,1],[41,2],[17,1],[17,1],[17,1],[17,1],[17,3],[47,2],[48,0],[48,1],[46,2],[46,2],[50,2],[49,1],[49,2],[8,5],[9,4],[54,2],[53,0],[53,2],[35,1],[35,1]],
performAction: function anonymous(yytext, yyleng, yylineno, yy, yystate /* action[1] */, $$ /* vstack */, _$ /* lstack */) {
/* this == yyval */

var $0 = $$.length - 1;
switch (yystate) {
case 1:

      return makeGrammar($$[$0]);
    
break;
case 6: case 14: case 17: case 63:
this.$ = [];
break;
case 7: case 13: case 15: case 18: case 40: case 46: case 59: case 64:
this.$ = $$[$0-1].concat($$[$0]);
break;
case 8:
this.$ = extend({ id: $$[$0-1]}, $$[$0]);
break;
case 9:
this.$ = { type: "object", expr: $$[$0-1].length ? { type: "or", exprs: [$$[$0-2]].concat($$[$0-1]) } : $$[$0-2] };
break;
case 10:
this.$ = { type: "map", from: $$[$0-3], to: $$[$0-1] };
break;
case 11: case 41:
this.$ = $$[$0].length > 1 ? { type: "propertyList", exprs: $$[$0] } : $$[$0][0];
break;
case 12:
this.$ = [ $$[$0] ];
break;
case 16:
this.$ = $$[$0].length === 0 ? { type: "epsilon" } : $$[$0].length === 1 ? $$[$0] : { type: "propertyList", exprs: $$[$0] };
break;
case 20:
this.$ = { type: "array", of: $$[$0-2] };
break;
case 31:
this.$ = { type: "reference", id: $$[$0-1], card: $$[$0] };
break;
case 33:
this.$ = "";
break;
case 35:
this.$ = { type: "property", id: $$[$0-3], propertyType: $$[$0-1], card: $$[$0] };
break;
case 36:
this.$ = { type: "propertyEnumeration", ids: [$$[$0-5]].concat($$[$0-4]), propertyType: $$[$0-1], card: $$[$0] };
break;
case 37:
this.$ = { type: "or", exprs: [$$[$0-2]].concat($$[$0-1]) };
break;
case 38: case 44: case 52: case 54: case 57: case 62:
this.$ = $$[$0];
break;
case 39: case 42: case 58:
this.$ = [$$[$0]];
break;
case 43:
this.$ = $$[$0-1].concat($$[$0-1]);
break;
case 45:
this.$ = [$$[$0]];;
break;
case 51:
this.$ = $$[$0-1];
break;
case 53:
this.$ = null;
break;
case 55: case 56:
this.$ = [$$[$0-1]].concat($$[$0]);
break;
case 60:
this.$ = { type: "nonObject", id: $$[$0-4], expr: $$[$0-1].length ? { type: "or", exprs: [$$[$0-2]].concat($$[$0-1]) } : $$[$0-2] };
break;
case 61:
this.$ = { type: "terminal", id: $$[$0-3], regexp: $$[$0-1].slice(1, -1).concat($$[$0].map(function (s) { return s.slice(1, -1); }).join('')) };
break;
}
},
table: [o($V0,[2,6],{3:1,4:2}),{1:[3]},{1:[2,1],5:3,6:4,7:5,8:6,9:7,10:[1,8]},o($V0,[2,7]),o($V0,[2,2]),o($V0,[2,3]),o($V0,[2,4]),o($V0,[2,5]),{11:9,12:$V1,23:10,24:$V2,36:[1,12],51:[1,11]},o($V0,[2,8]),o($V0,[2,19]),{10:$V3,13:15,18:16,19:17,34:19,37:$V4},{45:[1,21]},{10:[1,23],13:22,18:16,19:17,34:19,37:$V4},{10:$V5,11:29,12:$V1,17:26,23:30,24:$V2,25:24,30:25,37:$V6,45:$V7},o([22,52],$V8,{14:32}),o($V9,[2,11],{34:19,19:33,10:$V3,37:$V4}),o($Va,[2,12]),o($Va,$Vb,{33:34,35:36,36:$Vc,56:$Vd,57:$Ve}),o($Va,[2,32]),{10:[1,39],34:42,37:$V4,40:40,43:41},o($Vf,[2,63],{53:43}),o([15,22],$V8,{14:44}),o([10,15,22,37],$Vb,{33:34,35:36,16:[1,45],36:$Vc,56:$Vd,57:$Ve}),o($Vg,[2,29],{17:26,11:29,23:30,26:46,30:47,10:$V5,12:$V1,24:$V2,37:$V6,45:$V7}),o($Vh,[2,24]),o($Vh,[2,21],{28:48,29:[1,49]}),o($Vi,[2,47]),o($Vi,[2,48]),o($Vi,[2,49]),o($Vi,[2,50]),{10:[1,51],45:[1,52],46:50},{21:54,22:$Vj,52:[1,53]},o($Va,[2,13]),o($Va,[2,31]),{10:$V5,11:29,12:$V1,17:56,23:30,24:$V2,37:$V6,45:$V7},o($Vk,[2,34]),o($Vk,[2,65]),o($Vk,[2,66]),{22:$Vl,36:$Vc,38:57,42:58},{22:$Vm,41:60,44:61},o($Vn,[2,41],{34:63,10:$Vo,37:$V4}),o($Vp,[2,42]),o($V0,[2,61],{54:65,55:[1,66]}),{15:[1,67],21:54,22:$Vj},{10:$V5,11:29,12:$V1,17:68,23:30,24:$V2,37:$V6,45:$V7},{22:[1,71],27:[1,69],32:70},o($Vh,[2,25]),o($Vh,[2,23]),o($Vh,[2,22]),{39:[1,72]},{22:$Vq,49:73,50:74},{22:$Vq,49:76,50:74},o($V0,[2,60]),o($V9,[2,18]),o($Va,[2,14],{20:77}),o($Vk,$Vb,{35:36,33:78,56:$Vd,57:$Ve}),{22:$Vl,39:[1,79],42:80},o($Vn,[2,39]),{10:[1,81]},{22:$Vm,39:[1,82],44:83},o($Vn,[2,45]),{10:$Vo,34:42,37:$V4,40:84,43:41},o($Vp,[2,43]),{36:$Vc},o($Vf,[2,64]),{45:[1,85]},o($Vr,[2,9]),{15:[1,86]},o($Vr,[2,20]),o($Vg,[2,30]),o($Vh,[2,26],{31:87}),o($Vi,[2,51]),{22:$Vq,39:[2,55],50:88},o($Vn,[2,58]),{45:[1,89]},{22:$Vq,39:[2,56],50:88},o($V9,[2,16],{34:19,19:90,10:$V3,37:$V4}),o($Vk,[2,35]),{36:[1,91]},o($Vn,[2,40]),o($Vn,[2,38]),o($Vk,[2,37]),o($Vn,[2,46]),o($Vn,[2,44]),o($Vf,[2,62]),o($Vr,[2,10]),o($Vg,[2,28],{17:26,11:29,23:30,30:92,10:$V5,12:$V1,24:$V2,37:$V6,45:$V7}),o($Vn,[2,59]),o($Vn,[2,57]),o($Va,[2,15]),{10:$V5,11:29,12:$V1,17:93,23:30,24:$V2,37:$V6,45:$V7},o($Vh,[2,27]),o($Vk,$Vb,{35:36,33:94,56:$Vd,57:$Ve}),o($Vk,[2,36])],
defaultActions: {},
parseError: function parseError(str, hash) {
    if (hash.recoverable) {
        this.trace(str);
    } else {
        throw new Error(str);
    }
},
parse: function parse(input) {
    var self = this, stack = [0], tstack = [], vstack = [null], lstack = [], table = this.table, yytext = '', yylineno = 0, yyleng = 0, recovering = 0, TERROR = 2, EOF = 1;
    var args = lstack.slice.call(arguments, 1);
    var lexer = Object.create(this.lexer);
    var sharedState = { yy: {} };
    for (var k in this.yy) {
        if (Object.prototype.hasOwnProperty.call(this.yy, k)) {
            sharedState.yy[k] = this.yy[k];
        }
    }
    lexer.setInput(input, sharedState.yy);
    sharedState.yy.lexer = lexer;
    sharedState.yy.parser = this;
    if (typeof lexer.yylloc == 'undefined') {
        lexer.yylloc = {};
    }
    var yyloc = lexer.yylloc;
    lstack.push(yyloc);
    var ranges = lexer.options && lexer.options.ranges;
    if (typeof sharedState.yy.parseError === 'function') {
        this.parseError = sharedState.yy.parseError;
    } else {
        this.parseError = Object.getPrototypeOf(this).parseError;
    }
    function popStack(n) {
        stack.length = stack.length - 2 * n;
        vstack.length = vstack.length - n;
        lstack.length = lstack.length - n;
    }
    _token_stack:
        function lex() {
            var token;
            token = lexer.lex() || EOF;
            if (typeof token !== 'number') {
                token = self.symbols_[token] || token;
            }
            return token;
        }
    var symbol, preErrorSymbol, state, action, a, r, yyval = {}, p, len, newState, expected;
    while (true) {
        state = stack[stack.length - 1];
        if (this.defaultActions[state]) {
            action = this.defaultActions[state];
        } else {
            if (symbol === null || typeof symbol == 'undefined') {
                symbol = lex();
            }
            action = table[state] && table[state][symbol];
        }
                    if (typeof action === 'undefined' || !action.length || !action[0]) {
                var errStr = '';
                expected = [];
                for (p in table[state]) {
                    if (this.terminals_[p] && p > TERROR) {
                        expected.push('\'' + this.terminals_[p] + '\'');
                    }
                }
                if (lexer.showPosition) {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ':\n' + lexer.showPosition() + '\nExpecting ' + expected.join(', ') + ', got \'' + (this.terminals_[symbol] || symbol) + '\'';
                } else {
                    errStr = 'Parse error on line ' + (yylineno + 1) + ': Unexpected ' + (symbol == EOF ? 'end of input' : '\'' + (this.terminals_[symbol] || symbol) + '\'');
                }
                this.parseError(errStr, {
                    text: lexer.match,
                    token: this.terminals_[symbol] || symbol,
                    line: lexer.yylineno,
                    loc: yyloc,
                    expected: expected
                });
            }
        if (action[0] instanceof Array && action.length > 1) {
            throw new Error('Parse Error: multiple actions possible at state: ' + state + ', token: ' + symbol);
        }
        switch (action[0]) {
        case 1:
            stack.push(symbol);
            vstack.push(lexer.yytext);
            lstack.push(lexer.yylloc);
            stack.push(action[1]);
            symbol = null;
            if (!preErrorSymbol) {
                yyleng = lexer.yyleng;
                yytext = lexer.yytext;
                yylineno = lexer.yylineno;
                yyloc = lexer.yylloc;
                if (recovering > 0) {
                    recovering--;
                }
            } else {
                symbol = preErrorSymbol;
                preErrorSymbol = null;
            }
            break;
        case 2:
            len = this.productions_[action[1]][1];
            yyval.$ = vstack[vstack.length - len];
            yyval._$ = {
                first_line: lstack[lstack.length - (len || 1)].first_line,
                last_line: lstack[lstack.length - 1].last_line,
                first_column: lstack[lstack.length - (len || 1)].first_column,
                last_column: lstack[lstack.length - 1].last_column
            };
            if (ranges) {
                yyval._$.range = [
                    lstack[lstack.length - (len || 1)].range[0],
                    lstack[lstack.length - 1].range[1]
                ];
            }
            r = this.performAction.apply(yyval, [
                yytext,
                yyleng,
                yylineno,
                sharedState.yy,
                action[1],
                vstack,
                lstack
            ].concat(args));
            if (typeof r !== 'undefined') {
                return r;
            }
            if (len) {
                stack = stack.slice(0, -1 * len * 2);
                vstack = vstack.slice(0, -1 * len);
                lstack = lstack.slice(0, -1 * len);
            }
            stack.push(this.productions_[action[1]][0]);
            vstack.push(yyval.$);
            lstack.push(yyval._$);
            newState = table[stack[stack.length - 2]][stack[stack.length - 1]];
            stack.push(newState);
            break;
        case 3:
            return true;
        }
    }
    return true;
}};

  function makeGrammar (decls) {
    var m = { };
    var o = [ ];
    decls.forEach(function (elt) {
      m[elt.id] = elt;
      o.push(elt.id)
    });
    return { start: o[0], order: o, type: "schema", map: m };
  }

  function logret (x) {
    console.warn(x);
    return x;
  }

  // Extends a base object with properties of other objects
  function extend(base) {
    if (!base) base = {};
    for (var i = 1, l = arguments.length, arg; i < l && (arg = arguments[i] || {}); i++)
      for (var name in arg)
        base[name] = arg[name];
    return base;
  }
/* generated by jison-lex 0.3.4 */
var lexer = (function(){
var lexer = ({

EOF:1,

parseError:function parseError(str, hash) {
        if (this.yy.parser) {
            this.yy.parser.parseError(str, hash);
        } else {
            throw new Error(str);
        }
    },

// resets the lexer, sets new input
setInput:function (input, yy) {
        this.yy = yy || this.yy || {};
        this._input = input;
        this._more = this._backtrack = this.done = false;
        this.yylineno = this.yyleng = 0;
        this.yytext = this.matched = this.match = '';
        this.conditionStack = ['INITIAL'];
        this.yylloc = {
            first_line: 1,
            first_column: 0,
            last_line: 1,
            last_column: 0
        };
        if (this.options.ranges) {
            this.yylloc.range = [0,0];
        }
        this.offset = 0;
        return this;
    },

// consumes and returns one char from the input
input:function () {
        var ch = this._input[0];
        this.yytext += ch;
        this.yyleng++;
        this.offset++;
        this.match += ch;
        this.matched += ch;
        var lines = ch.match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno++;
            this.yylloc.last_line++;
        } else {
            this.yylloc.last_column++;
        }
        if (this.options.ranges) {
            this.yylloc.range[1]++;
        }

        this._input = this._input.slice(1);
        return ch;
    },

// unshifts one char (or a string) into the input
unput:function (ch) {
        var len = ch.length;
        var lines = ch.split(/(?:\r\n?|\n)/g);

        this._input = ch + this._input;
        this.yytext = this.yytext.substr(0, this.yytext.length - len);
        //this.yyleng -= len;
        this.offset -= len;
        var oldLines = this.match.split(/(?:\r\n?|\n)/g);
        this.match = this.match.substr(0, this.match.length - 1);
        this.matched = this.matched.substr(0, this.matched.length - 1);

        if (lines.length - 1) {
            this.yylineno -= lines.length - 1;
        }
        var r = this.yylloc.range;

        this.yylloc = {
            first_line: this.yylloc.first_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.first_column,
            last_column: lines ?
                (lines.length === oldLines.length ? this.yylloc.first_column : 0)
                 + oldLines[oldLines.length - lines.length].length - lines[0].length :
              this.yylloc.first_column - len
        };

        if (this.options.ranges) {
            this.yylloc.range = [r[0], r[0] + this.yyleng - len];
        }
        this.yyleng = this.yytext.length;
        return this;
    },

// When called from action, caches matched text and appends it on next action
more:function () {
        this._more = true;
        return this;
    },

// When called from action, signals the lexer that this rule fails to match the input, so the next matching rule (regex) should be tested instead.
reject:function () {
        if (this.options.backtrack_lexer) {
            this._backtrack = true;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. You can only invoke reject() in the lexer when the lexer is of the backtracking persuasion (options.backtrack_lexer = true).\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });

        }
        return this;
    },

// retain first n characters of the match
less:function (n) {
        this.unput(this.match.slice(n));
    },

// displays already matched input, i.e. for error messages
pastInput:function () {
        var past = this.matched.substr(0, this.matched.length - this.match.length);
        return (past.length > 20 ? '...':'') + past.substr(-20).replace(/\n/g, "");
    },

// displays upcoming input, i.e. for error messages
upcomingInput:function () {
        var next = this.match;
        if (next.length < 20) {
            next += this._input.substr(0, 20-next.length);
        }
        return (next.substr(0,20) + (next.length > 20 ? '...' : '')).replace(/\n/g, "");
    },

// displays the character position where the lexing error occurred, i.e. for error messages
showPosition:function () {
        var pre = this.pastInput();
        var c = new Array(pre.length + 1).join("-");
        return pre + this.upcomingInput() + "\n" + c + "^";
    },

// test the lexed token: return FALSE when not a match, otherwise return token
test_match:function (match, indexed_rule) {
        var token,
            lines,
            backup;

        if (this.options.backtrack_lexer) {
            // save context
            backup = {
                yylineno: this.yylineno,
                yylloc: {
                    first_line: this.yylloc.first_line,
                    last_line: this.last_line,
                    first_column: this.yylloc.first_column,
                    last_column: this.yylloc.last_column
                },
                yytext: this.yytext,
                match: this.match,
                matches: this.matches,
                matched: this.matched,
                yyleng: this.yyleng,
                offset: this.offset,
                _more: this._more,
                _input: this._input,
                yy: this.yy,
                conditionStack: this.conditionStack.slice(0),
                done: this.done
            };
            if (this.options.ranges) {
                backup.yylloc.range = this.yylloc.range.slice(0);
            }
        }

        lines = match[0].match(/(?:\r\n?|\n).*/g);
        if (lines) {
            this.yylineno += lines.length;
        }
        this.yylloc = {
            first_line: this.yylloc.last_line,
            last_line: this.yylineno + 1,
            first_column: this.yylloc.last_column,
            last_column: lines ?
                         lines[lines.length - 1].length - lines[lines.length - 1].match(/\r?\n?/)[0].length :
                         this.yylloc.last_column + match[0].length
        };
        this.yytext += match[0];
        this.match += match[0];
        this.matches = match;
        this.yyleng = this.yytext.length;
        if (this.options.ranges) {
            this.yylloc.range = [this.offset, this.offset += this.yyleng];
        }
        this._more = false;
        this._backtrack = false;
        this._input = this._input.slice(match[0].length);
        this.matched += match[0];
        token = this.performAction.call(this, this.yy, this, indexed_rule, this.conditionStack[this.conditionStack.length - 1]);
        if (this.done && this._input) {
            this.done = false;
        }
        if (token) {
            return token;
        } else if (this._backtrack) {
            // recover context
            for (var k in backup) {
                this[k] = backup[k];
            }
            return false; // rule action called reject() implying the next rule should be tested instead.
        }
        return false;
    },

// return next match in input
next:function () {
        if (this.done) {
            return this.EOF;
        }
        if (!this._input) {
            this.done = true;
        }

        var token,
            match,
            tempMatch,
            index;
        if (!this._more) {
            this.yytext = '';
            this.match = '';
        }
        var rules = this._currentRules();
        for (var i = 0; i < rules.length; i++) {
            tempMatch = this._input.match(this.rules[rules[i]]);
            if (tempMatch && (!match || tempMatch[0].length > match[0].length)) {
                match = tempMatch;
                index = i;
                if (this.options.backtrack_lexer) {
                    token = this.test_match(tempMatch, rules[i]);
                    if (token !== false) {
                        return token;
                    } else if (this._backtrack) {
                        match = false;
                        continue; // rule action called reject() implying a rule MISmatch.
                    } else {
                        // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
                        return false;
                    }
                } else if (!this.options.flex) {
                    break;
                }
            }
        }
        if (match) {
            token = this.test_match(match, rules[index]);
            if (token !== false) {
                return token;
            }
            // else: this is a lexer rule which consumes input without producing a token (e.g. whitespace)
            return false;
        }
        if (this._input === "") {
            return this.EOF;
        } else {
            return this.parseError('Lexical error on line ' + (this.yylineno + 1) + '. Unrecognized text.\n' + this.showPosition(), {
                text: "",
                token: null,
                line: this.yylineno
            });
        }
    },

// return next match that has a token
lex:function lex() {
        var r = this.next();
        if (r) {
            return r;
        } else {
            return this.lex();
        }
    },

// activates a new lexer condition state (pushes the new lexer condition state onto the condition stack)
begin:function begin(condition) {
        this.conditionStack.push(condition);
    },

// pop the previously active lexer condition state off the condition stack
popState:function popState() {
        var n = this.conditionStack.length - 1;
        if (n > 0) {
            return this.conditionStack.pop();
        } else {
            return this.conditionStack[0];
        }
    },

// produce the lexer rule set which is active for the currently active lexer condition state
_currentRules:function _currentRules() {
        if (this.conditionStack.length && this.conditionStack[this.conditionStack.length - 1]) {
            return this.conditions[this.conditionStack[this.conditionStack.length - 1]].rules;
        } else {
            return this.conditions["INITIAL"].rules;
        }
    },

// return the currently active lexer condition state; when an index argument is provided it produces the N-th previous condition state, if available
topState:function topState(n) {
        n = this.conditionStack.length - 1 - Math.abs(n || 0);
        if (n >= 0) {
            return this.conditionStack[n];
        } else {
            return "INITIAL";
        }
    },

// alias for begin(condition)
pushState:function pushState(condition) {
        this.begin(condition);
    },

// return the number of states currently on the stack
stateStackSize:function stateStackSize() {
        return this.conditionStack.length;
    },
options: {},
performAction: function anonymous(yy,yy_,$avoiding_name_collisions,YY_START) {
var YYSTATE=YY_START;
switch($avoiding_name_collisions) {
case 0:/**/
break;
case 1:return 36;
break;
case 2:return 'GT_DOLLAR';
break;
case 3:return 51;
break;
case 4:return 24;
break;
case 5:return 27;
break;
case 6:return 12;
break;
case 7:return 15;
break;
case 8:return 37;
break;
case 9:return 39;
break;
case 10:return 16;
break;
case 11:return 56;
break;
case 12:return 22;
break;
case 13:return 55;
break;
case 14:return 52;
break;
case 15:return 57;
break;
case 16:return 10;
break;
case 17:return 45;
break;
case 18:return 'invalid character '+yy_.yytext;
break;
}
},
rules: [/^(?:\s+|((\/\/|#)[^\u000a\u000d]*))/,/^(?::)/,/^(?:\$)/,/^(?:=)/,/^(?:\[)/,/^(?:\])/,/^(?:\{)/,/^(?:\})/,/^(?:\()/,/^(?:\))/,/^(?:->)/,/^(?:\?)/,/^(?:\|)/,/^(?:\+)/,/^(?:;)/,/^(?:\*)/,/^(?:([a-zA-Z_]+))/,/^(?:("([^\"]|\\")*"))/,/^(?:.)/],
conditions: {"INITIAL":{"rules":[0,1,2,3,4,5,6,7,8,9,10,11,12,13,14,15,16,17,18],"inclusive":true}}
});
return lexer;
})();
parser.lexer = lexer;
function Parser () {
  this.yy = {};
}
Parser.prototype = parser;parser.Parser = Parser;
return new Parser;
})();


if (typeof require !== 'undefined' && typeof exports !== 'undefined') {
exports.parser = parser;
exports.Parser = parser.Parser;
exports.parse = function () { return parser.parse.apply(parser, arguments); };
exports.main = function commonjsMain(args) {
    if (!args[1]) {
        console.log('Usage: '+args[0]+' FILE');
        process.exit(1);
    }
    var source = require('fs').readFileSync(require('path').normalize(args[1]), "utf8");
    return exports.parser.parse(source);
};
if (typeof module !== 'undefined' && require.main === module) {
  exports.main(process.argv.slice(1));
}
}